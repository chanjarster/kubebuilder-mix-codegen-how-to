/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "example.com/foo-controller/apis/webapp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GuestbookLister helps list Guestbooks.
type GuestbookLister interface {
	// List lists all Guestbooks in the indexer.
	List(selector labels.Selector) (ret []*v1.Guestbook, err error)
	// Guestbooks returns an object that can list and get Guestbooks.
	Guestbooks(namespace string) GuestbookNamespaceLister
	GuestbookListerExpansion
}

// guestbookLister implements the GuestbookLister interface.
type guestbookLister struct {
	indexer cache.Indexer
}

// NewGuestbookLister returns a new GuestbookLister.
func NewGuestbookLister(indexer cache.Indexer) GuestbookLister {
	return &guestbookLister{indexer: indexer}
}

// List lists all Guestbooks in the indexer.
func (s *guestbookLister) List(selector labels.Selector) (ret []*v1.Guestbook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Guestbook))
	})
	return ret, err
}

// Guestbooks returns an object that can list and get Guestbooks.
func (s *guestbookLister) Guestbooks(namespace string) GuestbookNamespaceLister {
	return guestbookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GuestbookNamespaceLister helps list and get Guestbooks.
type GuestbookNamespaceLister interface {
	// List lists all Guestbooks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Guestbook, err error)
	// Get retrieves the Guestbook from the indexer for a given namespace and name.
	Get(name string) (*v1.Guestbook, error)
	GuestbookNamespaceListerExpansion
}

// guestbookNamespaceLister implements the GuestbookNamespaceLister
// interface.
type guestbookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Guestbooks in the indexer for a given namespace.
func (s guestbookNamespaceLister) List(selector labels.Selector) (ret []*v1.Guestbook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Guestbook))
	})
	return ret, err
}

// Get retrieves the Guestbook from the indexer for a given namespace and name.
func (s guestbookNamespaceLister) Get(name string) (*v1.Guestbook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("guestbook"), name)
	}
	return obj.(*v1.Guestbook), nil
}
